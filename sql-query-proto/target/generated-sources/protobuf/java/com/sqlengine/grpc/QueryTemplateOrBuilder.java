// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_runner.proto

package com.sqlengine.grpc;

public interface QueryTemplateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:queryrunner.QueryTemplate)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string id = 1;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <code>string id = 1;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <code>string templateName = 2;</code>
   * @return The templateName.
   */
  java.lang.String getTemplateName();
  /**
   * <code>string templateName = 2;</code>
   * @return The bytes for templateName.
   */
  com.google.protobuf.ByteString
      getTemplateNameBytes();

  /**
   * <code>string createdBy = 3;</code>
   * @return The createdBy.
   */
  java.lang.String getCreatedBy();
  /**
   * <code>string createdBy = 3;</code>
   * @return The bytes for createdBy.
   */
  com.google.protobuf.ByteString
      getCreatedByBytes();

  /**
   * <code>string queryType = 4;</code>
   * @return The queryType.
   */
  java.lang.String getQueryType();
  /**
   * <code>string queryType = 4;</code>
   * @return The bytes for queryType.
   */
  com.google.protobuf.ByteString
      getQueryTypeBytes();

  /**
   * <code>repeated .queryrunner.CteBlock ctes = 5;</code>
   */
  java.util.List<com.sqlengine.grpc.CteBlock> 
      getCtesList();
  /**
   * <code>repeated .queryrunner.CteBlock ctes = 5;</code>
   */
  com.sqlengine.grpc.CteBlock getCtes(int index);
  /**
   * <code>repeated .queryrunner.CteBlock ctes = 5;</code>
   */
  int getCtesCount();
  /**
   * <code>repeated .queryrunner.CteBlock ctes = 5;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.CteBlockOrBuilder> 
      getCtesOrBuilderList();
  /**
   * <code>repeated .queryrunner.CteBlock ctes = 5;</code>
   */
  com.sqlengine.grpc.CteBlockOrBuilder getCtesOrBuilder(
      int index);

  /**
   * <code>string tableName = 6;</code>
   * @return The tableName.
   */
  java.lang.String getTableName();
  /**
   * <code>string tableName = 6;</code>
   * @return The bytes for tableName.
   */
  com.google.protobuf.ByteString
      getTableNameBytes();

  /**
   * <code>repeated .queryrunner.UnionQuery unions = 7;</code>
   */
  java.util.List<com.sqlengine.grpc.UnionQuery> 
      getUnionsList();
  /**
   * <code>repeated .queryrunner.UnionQuery unions = 7;</code>
   */
  com.sqlengine.grpc.UnionQuery getUnions(int index);
  /**
   * <code>repeated .queryrunner.UnionQuery unions = 7;</code>
   */
  int getUnionsCount();
  /**
   * <code>repeated .queryrunner.UnionQuery unions = 7;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.UnionQueryOrBuilder> 
      getUnionsOrBuilderList();
  /**
   * <code>repeated .queryrunner.UnionQuery unions = 7;</code>
   */
  com.sqlengine.grpc.UnionQueryOrBuilder getUnionsOrBuilder(
      int index);

  /**
   * <code>repeated .queryrunner.JoinConfig joins = 8;</code>
   */
  java.util.List<com.sqlengine.grpc.JoinConfig> 
      getJoinsList();
  /**
   * <code>repeated .queryrunner.JoinConfig joins = 8;</code>
   */
  com.sqlengine.grpc.JoinConfig getJoins(int index);
  /**
   * <code>repeated .queryrunner.JoinConfig joins = 8;</code>
   */
  int getJoinsCount();
  /**
   * <code>repeated .queryrunner.JoinConfig joins = 8;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.JoinConfigOrBuilder> 
      getJoinsOrBuilderList();
  /**
   * <code>repeated .queryrunner.JoinConfig joins = 8;</code>
   */
  com.sqlengine.grpc.JoinConfigOrBuilder getJoinsOrBuilder(
      int index);

  /**
   * <code>repeated .queryrunner.SelectedColumn selectedColumns = 9;</code>
   */
  java.util.List<com.sqlengine.grpc.SelectedColumn> 
      getSelectedColumnsList();
  /**
   * <code>repeated .queryrunner.SelectedColumn selectedColumns = 9;</code>
   */
  com.sqlengine.grpc.SelectedColumn getSelectedColumns(int index);
  /**
   * <code>repeated .queryrunner.SelectedColumn selectedColumns = 9;</code>
   */
  int getSelectedColumnsCount();
  /**
   * <code>repeated .queryrunner.SelectedColumn selectedColumns = 9;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.SelectedColumnOrBuilder> 
      getSelectedColumnsOrBuilderList();
  /**
   * <code>repeated .queryrunner.SelectedColumn selectedColumns = 9;</code>
   */
  com.sqlengine.grpc.SelectedColumnOrBuilder getSelectedColumnsOrBuilder(
      int index);

  /**
   * <code>bool distinct = 10;</code>
   * @return The distinct.
   */
  boolean getDistinct();

  /**
   * <code>map&lt;string, string&gt; updatedValues = 11;</code>
   */
  int getUpdatedValuesCount();
  /**
   * <code>map&lt;string, string&gt; updatedValues = 11;</code>
   */
  boolean containsUpdatedValues(
      java.lang.String key);
  /**
   * Use {@link #getUpdatedValuesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getUpdatedValues();
  /**
   * <code>map&lt;string, string&gt; updatedValues = 11;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getUpdatedValuesMap();
  /**
   * <code>map&lt;string, string&gt; updatedValues = 11;</code>
   */
  /* nullable */
java.lang.String getUpdatedValuesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; updatedValues = 11;</code>
   */
  java.lang.String getUpdatedValuesOrThrow(
      java.lang.String key);

  /**
   * <code>repeated .queryrunner.QueryCondition conditions = 12;</code>
   */
  java.util.List<com.sqlengine.grpc.QueryCondition> 
      getConditionsList();
  /**
   * <code>repeated .queryrunner.QueryCondition conditions = 12;</code>
   */
  com.sqlengine.grpc.QueryCondition getConditions(int index);
  /**
   * <code>repeated .queryrunner.QueryCondition conditions = 12;</code>
   */
  int getConditionsCount();
  /**
   * <code>repeated .queryrunner.QueryCondition conditions = 12;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.QueryConditionOrBuilder> 
      getConditionsOrBuilderList();
  /**
   * <code>repeated .queryrunner.QueryCondition conditions = 12;</code>
   */
  com.sqlengine.grpc.QueryConditionOrBuilder getConditionsOrBuilder(
      int index);

  /**
   * <code>repeated .queryrunner.QueryCondition havingConditions = 13;</code>
   */
  java.util.List<com.sqlengine.grpc.QueryCondition> 
      getHavingConditionsList();
  /**
   * <code>repeated .queryrunner.QueryCondition havingConditions = 13;</code>
   */
  com.sqlengine.grpc.QueryCondition getHavingConditions(int index);
  /**
   * <code>repeated .queryrunner.QueryCondition havingConditions = 13;</code>
   */
  int getHavingConditionsCount();
  /**
   * <code>repeated .queryrunner.QueryCondition havingConditions = 13;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.QueryConditionOrBuilder> 
      getHavingConditionsOrBuilderList();
  /**
   * <code>repeated .queryrunner.QueryCondition havingConditions = 13;</code>
   */
  com.sqlengine.grpc.QueryConditionOrBuilder getHavingConditionsOrBuilder(
      int index);

  /**
   * <code>repeated .queryrunner.SubqueryBlock subqueries = 14;</code>
   */
  java.util.List<com.sqlengine.grpc.SubqueryBlock> 
      getSubqueriesList();
  /**
   * <code>repeated .queryrunner.SubqueryBlock subqueries = 14;</code>
   */
  com.sqlengine.grpc.SubqueryBlock getSubqueries(int index);
  /**
   * <code>repeated .queryrunner.SubqueryBlock subqueries = 14;</code>
   */
  int getSubqueriesCount();
  /**
   * <code>repeated .queryrunner.SubqueryBlock subqueries = 14;</code>
   */
  java.util.List<? extends com.sqlengine.grpc.SubqueryBlockOrBuilder> 
      getSubqueriesOrBuilderList();
  /**
   * <code>repeated .queryrunner.SubqueryBlock subqueries = 14;</code>
   */
  com.sqlengine.grpc.SubqueryBlockOrBuilder getSubqueriesOrBuilder(
      int index);

  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  int getOrderByCount();
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  boolean containsOrderBy(
      java.lang.String key);
  /**
   * Use {@link #getOrderByMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.sqlengine.grpc.SortDirection>
  getOrderBy();
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  java.util.Map<java.lang.String, com.sqlengine.grpc.SortDirection>
  getOrderByMap();
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  /* nullable */
com.sqlengine.grpc.SortDirection getOrderByOrDefault(
      java.lang.String key,
      /* nullable */
com.sqlengine.grpc.SortDirection         defaultValue);
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  com.sqlengine.grpc.SortDirection getOrderByOrThrow(
      java.lang.String key);
  /**
   * Use {@link #getOrderByValueMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Integer>
  getOrderByValue();
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  java.util.Map<java.lang.String, java.lang.Integer>
  getOrderByValueMap();
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  int getOrderByValueOrDefault(
      java.lang.String key,
      int defaultValue);
  /**
   * <code>map&lt;string, .queryrunner.SortDirection&gt; orderBy = 15;</code>
   */
  int getOrderByValueOrThrow(
      java.lang.String key);

  /**
   * <code>int32 limit = 16;</code>
   * @return The limit.
   */
  int getLimit();

  /**
   * <code>int32 offset = 17;</code>
   * @return The offset.
   */
  int getOffset();

  /**
   * <code>repeated string groupBy = 18;</code>
   * @return A list containing the groupBy.
   */
  java.util.List<java.lang.String>
      getGroupByList();
  /**
   * <code>repeated string groupBy = 18;</code>
   * @return The count of groupBy.
   */
  int getGroupByCount();
  /**
   * <code>repeated string groupBy = 18;</code>
   * @param index The index of the element to return.
   * @return The groupBy at the given index.
   */
  java.lang.String getGroupBy(int index);
  /**
   * <code>repeated string groupBy = 18;</code>
   * @param index The index of the value to return.
   * @return The bytes of the groupBy at the given index.
   */
  com.google.protobuf.ByteString
      getGroupByBytes(int index);

  /**
   * <code>string createdAt = 19;</code>
   * @return The createdAt.
   */
  java.lang.String getCreatedAt();
  /**
   * <code>string createdAt = 19;</code>
   * @return The bytes for createdAt.
   */
  com.google.protobuf.ByteString
      getCreatedAtBytes();

  /**
   * <code>string updatedAt = 20;</code>
   * @return The updatedAt.
   */
  java.lang.String getUpdatedAt();
  /**
   * <code>string updatedAt = 20;</code>
   * @return The bytes for updatedAt.
   */
  com.google.protobuf.ByteString
      getUpdatedAtBytes();

  /**
   * <pre>
   * Key-value pairs for single row insert
   * </pre>
   *
   * <code>map&lt;string, string&gt; insertValues = 21;</code>
   */
  int getInsertValuesCount();
  /**
   * <pre>
   * Key-value pairs for single row insert
   * </pre>
   *
   * <code>map&lt;string, string&gt; insertValues = 21;</code>
   */
  boolean containsInsertValues(
      java.lang.String key);
  /**
   * Use {@link #getInsertValuesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getInsertValues();
  /**
   * <pre>
   * Key-value pairs for single row insert
   * </pre>
   *
   * <code>map&lt;string, string&gt; insertValues = 21;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getInsertValuesMap();
  /**
   * <pre>
   * Key-value pairs for single row insert
   * </pre>
   *
   * <code>map&lt;string, string&gt; insertValues = 21;</code>
   */
  /* nullable */
java.lang.String getInsertValuesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Key-value pairs for single row insert
   * </pre>
   *
   * <code>map&lt;string, string&gt; insertValues = 21;</code>
   */
  java.lang.String getInsertValuesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * If true, use INSERT INTO ... SELECT ...
   * </pre>
   *
   * <code>bool insertFromSelect = 22;</code>
   * @return The insertFromSelect.
   */
  boolean getInsertFromSelect();

  /**
   * <pre>
   * Columns to insert into (used with insertFromSelect + subqueries)
   * </pre>
   *
   * <code>repeated string insertColumns = 23;</code>
   * @return A list containing the insertColumns.
   */
  java.util.List<java.lang.String>
      getInsertColumnsList();
  /**
   * <pre>
   * Columns to insert into (used with insertFromSelect + subqueries)
   * </pre>
   *
   * <code>repeated string insertColumns = 23;</code>
   * @return The count of insertColumns.
   */
  int getInsertColumnsCount();
  /**
   * <pre>
   * Columns to insert into (used with insertFromSelect + subqueries)
   * </pre>
   *
   * <code>repeated string insertColumns = 23;</code>
   * @param index The index of the element to return.
   * @return The insertColumns at the given index.
   */
  java.lang.String getInsertColumns(int index);
  /**
   * <pre>
   * Columns to insert into (used with insertFromSelect + subqueries)
   * </pre>
   *
   * <code>repeated string insertColumns = 23;</code>
   * @param index The index of the value to return.
   * @return The bytes of the insertColumns at the given index.
   */
  com.google.protobuf.ByteString
      getInsertColumnsBytes(int index);

  /**
   * <pre>
   * Conflict resolution: unique keys for ON CONFLICT (PostgreSQL)
   * </pre>
   *
   * <code>repeated string conflictColumns = 24;</code>
   * @return A list containing the conflictColumns.
   */
  java.util.List<java.lang.String>
      getConflictColumnsList();
  /**
   * <pre>
   * Conflict resolution: unique keys for ON CONFLICT (PostgreSQL)
   * </pre>
   *
   * <code>repeated string conflictColumns = 24;</code>
   * @return The count of conflictColumns.
   */
  int getConflictColumnsCount();
  /**
   * <pre>
   * Conflict resolution: unique keys for ON CONFLICT (PostgreSQL)
   * </pre>
   *
   * <code>repeated string conflictColumns = 24;</code>
   * @param index The index of the element to return.
   * @return The conflictColumns at the given index.
   */
  java.lang.String getConflictColumns(int index);
  /**
   * <pre>
   * Conflict resolution: unique keys for ON CONFLICT (PostgreSQL)
   * </pre>
   *
   * <code>repeated string conflictColumns = 24;</code>
   * @param index The index of the value to return.
   * @return The bytes of the conflictColumns at the given index.
   */
  com.google.protobuf.ByteString
      getConflictColumnsBytes(int index);

  /**
   * <pre>
   * Columns and values to update on conflict (Upsert behavior)
   * </pre>
   *
   * <code>map&lt;string, string&gt; upsertValues = 25;</code>
   */
  int getUpsertValuesCount();
  /**
   * <pre>
   * Columns and values to update on conflict (Upsert behavior)
   * </pre>
   *
   * <code>map&lt;string, string&gt; upsertValues = 25;</code>
   */
  boolean containsUpsertValues(
      java.lang.String key);
  /**
   * Use {@link #getUpsertValuesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getUpsertValues();
  /**
   * <pre>
   * Columns and values to update on conflict (Upsert behavior)
   * </pre>
   *
   * <code>map&lt;string, string&gt; upsertValues = 25;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getUpsertValuesMap();
  /**
   * <pre>
   * Columns and values to update on conflict (Upsert behavior)
   * </pre>
   *
   * <code>map&lt;string, string&gt; upsertValues = 25;</code>
   */
  /* nullable */
java.lang.String getUpsertValuesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Columns and values to update on conflict (Upsert behavior)
   * </pre>
   *
   * <code>map&lt;string, string&gt; upsertValues = 25;</code>
   */
  java.lang.String getUpsertValuesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Use REPLACE INTO / INSERT OR REPLACE (MySQL/MariaDB/SQLite)
   * </pre>
   *
   * <code>bool useReplace = 26;</code>
   * @return The useReplace.
   */
  boolean getUseReplace();

  /**
   * <pre>
   * Use MERGE INTO (Oracle, SQL Server, MariaDB 10.3+)
   * </pre>
   *
   * <code>bool useMerge = 27;</code>
   * @return The useMerge.
   */
  boolean getUseMerge();

  /**
   * <pre>
   * RETURNING support
   * </pre>
   *
   * <code>repeated string returningFields = 28;</code>
   * @return A list containing the returningFields.
   */
  java.util.List<java.lang.String>
      getReturningFieldsList();
  /**
   * <pre>
   * RETURNING support
   * </pre>
   *
   * <code>repeated string returningFields = 28;</code>
   * @return The count of returningFields.
   */
  int getReturningFieldsCount();
  /**
   * <pre>
   * RETURNING support
   * </pre>
   *
   * <code>repeated string returningFields = 28;</code>
   * @param index The index of the element to return.
   * @return The returningFields at the given index.
   */
  java.lang.String getReturningFields(int index);
  /**
   * <pre>
   * RETURNING support
   * </pre>
   *
   * <code>repeated string returningFields = 28;</code>
   * @param index The index of the value to return.
   * @return The bytes of the returningFields at the given index.
   */
  com.google.protobuf.ByteString
      getReturningFieldsBytes(int index);

  /**
   * <pre>
   * Optional primary key field (default: "id")
   * </pre>
   *
   * <code>string primaryKeyField = 29;</code>
   * @return The primaryKeyField.
   */
  java.lang.String getPrimaryKeyField();
  /**
   * <pre>
   * Optional primary key field (default: "id")
   * </pre>
   *
   * <code>string primaryKeyField = 29;</code>
   * @return The bytes for primaryKeyField.
   */
  com.google.protobuf.ByteString
      getPrimaryKeyFieldBytes();

  /**
   * <code>string sqlQuery = 30;</code>
   * @return The sqlQuery.
   */
  java.lang.String getSqlQuery();
  /**
   * <code>string sqlQuery = 30;</code>
   * @return The bytes for sqlQuery.
   */
  com.google.protobuf.ByteString
      getSqlQueryBytes();

  /**
   * <pre>
   * --- DELETE-specific fields ---
   * </pre>
   *
   * <code>bool deleteWithJoin = 31;</code>
   * @return The deleteWithJoin.
   */
  boolean getDeleteWithJoin();

  /**
   * <code>string deleteTableAlias = 32;</code>
   * @return The deleteTableAlias.
   */
  java.lang.String getDeleteTableAlias();
  /**
   * <code>string deleteTableAlias = 32;</code>
   * @return The bytes for deleteTableAlias.
   */
  com.google.protobuf.ByteString
      getDeleteTableAliasBytes();
}
